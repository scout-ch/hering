{"version":3,"file":"static/js/764.ffc549db.chunk.js","mappings":"qJAGA,MAoEA,EApE4BA,KAExB,MAAMC,GAAWC,EAAAA,EAAAA,MA+DjB,OA7DAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAsBA,KACxB,MASMC,EATiBC,MACnB,GAAIL,EAASM,KAAM,CACf,MAAMC,EAAKP,EAASM,KAAKE,QAAQ,IAAK,IACtC,OAAOC,SAASC,eAAeH,EACnC,CAEA,OAAOE,SAASC,eAAe,gBAAgB,EAG/BL,GACfD,EAKLA,EAAYO,eAAe,CACvBC,SAAU,UACVC,MAAO,UANPC,OAAOC,SAAS,EAAG,EAOrB,EAIAC,EAAmB,IAAIC,kBAAkBC,IAC3CA,EAAQC,SAAQC,IACZ,GAAoB,cAAhBA,EAAOC,MACJD,EAAOE,OAAOC,WAAaH,EAAOE,OAAOE,cACZ,IAA7BJ,EAAOK,WAAWC,OACrB,OAIJ,GAAmB,SADHN,EAAOE,OACXf,GACR,OAGmBoB,MAAMC,KAAKR,EAAOK,YACpCI,QAAOC,GAAKA,EAAEP,WAAaO,EAAEN,eAC7BO,KAAID,GAAKA,IACTE,MAAKC,GAAc,YAATA,EAAE1B,MAOjBJ,GAAqB,GACvB,IAGA+B,EAAczB,SAASC,eAAe,QAK5C,OAJAM,EAAiBmB,QAAQD,EAAc,CAAEE,YAAY,EAAOC,WAAW,EAAMC,SAAS,IAEtFnC,IAEO,KACHa,EAAiBuB,YAAY,CAChC,GACF,CAACvC,EAASM,OAEN,IAAI,C","sources":["helper/SectionHashHelper.tsx"],"sourcesContent":["import { useEffect } from \"react\"\nimport { useLocation } from \"react-router-dom\"\n\nconst ScrollToHashElement = () => {\n\n    const location = useLocation();\n\n    useEffect(() => {\n        const scrollToHashElement = () => {\n            const getHashElement = () => {\n                if (location.hash) {\n                    const id = location.hash.replace('#', '');\n                    return document.getElementById(id);\n                }\n\n                return document.getElementById('section-title')\n            }\n\n            const hashElement = getHashElement();\n            if (!hashElement) {\n                window.scrollTo(0, 0)\n                return;\n            }\n\n            hashElement.scrollIntoView({\n                behavior: \"instant\",\n                block: 'start'\n            });\n        }\n\n        // wait for section to be loaded into the DOM\n        const mutationObserver = new MutationObserver((records) => {\n            records.forEach(record => {\n                if (record.type !== 'childList'\n                    || record.target.nodeType !== record.target.ELEMENT_NODE\n                    || record.addedNodes.length === 0) {\n                    return\n                }\n\n                const element = record.target as HTMLElement\n                if (element.id !== 'main') {\n                    return\n                }\n\n                const isSectionAdded = Array.from(record.addedNodes)\n                    .filter(n => n.nodeType === n.ELEMENT_NODE)\n                    .map(n => n as HTMLElement)\n                    .some(e => e.id === 'section')\n\n                // only scroll to hash location if section view is loaded into the DOM\n                if (!isSectionAdded) {\n                    return\n                }\n\n                scrollToHashElement()\n            })\n        });\n\n        const mainElement = document.getElementById('main')\n        mutationObserver.observe(mainElement!, { attributes: false, childList: true, subtree: true });\n\n        scrollToHashElement();\n\n        return () => {\n            mutationObserver.disconnect()\n        }\n    }, [location.hash]);\n\n    return null;\n};\n\nexport default ScrollToHashElement;"],"names":["ScrollToHashElement","location","useLocation","useEffect","scrollToHashElement","hashElement","getHashElement","hash","id","replace","document","getElementById","scrollIntoView","behavior","block","window","scrollTo","mutationObserver","MutationObserver","records","forEach","record","type","target","nodeType","ELEMENT_NODE","addedNodes","length","Array","from","filter","n","map","some","e","mainElement","observe","attributes","childList","subtree","disconnect"],"sourceRoot":""}