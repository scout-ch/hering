{"version":3,"file":"static/js/704.4a46358f.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js","../node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js","../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js","../node_modules/style-to-object/src/index.ts","../node_modules/devlop/lib/default.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar isPropValid = /* #__PURE__ */memoize(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\nexport { isPropValid as default };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport { withEmotionCache, ThemeContext } from '@emotion/react';\nimport { getRegisteredStyles, registerStyles, insertStyles } from '@emotion/utils';\nimport { serializeStyles } from '@emotion/serialize';\nimport { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks';\n\nvar testOmitPropsOnStringTag = isPropValid;\n\nvar testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {\n  return key !== 'theme';\n};\n\nvar getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {\n  return typeof tag === 'string' && // 96 is one less than the char code\n  // for \"a\" so this is checking that\n  // it's a lowercase character\n  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;\n};\nvar composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {\n  var shouldForwardProp;\n\n  if (options) {\n    var optionsShouldForwardProp = options.shouldForwardProp;\n    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {\n      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);\n    } : optionsShouldForwardProp;\n  }\n\n  if (typeof shouldForwardProp !== 'function' && isReal) {\n    shouldForwardProp = tag.__emotion_forwardProp;\n  }\n\n  return shouldForwardProp;\n};\n\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\n\nvar Insertion = function Insertion(_ref) {\n  var cache = _ref.cache,\n      serialized = _ref.serialized,\n      isStringTag = _ref.isStringTag;\n  registerStyles(cache, serialized, isStringTag);\n  useInsertionEffectAlwaysWithSyncFallback(function () {\n    return insertStyles(cache, serialized, isStringTag);\n  });\n\n  return null;\n};\n\nvar createStyled = function createStyled(tag, options) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (tag === undefined) {\n      throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n    }\n  }\n\n  var isReal = tag.__emotion_real === tag;\n  var baseTag = isReal && tag.__emotion_base || tag;\n  var identifierName;\n  var targetClassName;\n\n  if (options !== undefined) {\n    identifierName = options.label;\n    targetClassName = options.target;\n  }\n\n  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);\n  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);\n  var shouldUseAs = !defaultShouldForwardProp('as');\n  return function () {\n    var args = arguments;\n    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n\n    if (identifierName !== undefined) {\n      styles.push(\"label:\" + identifierName + \";\");\n    }\n\n    if (args[0] == null || args[0].raw === undefined) {\n      styles.push.apply(styles, args);\n    } else {\n      if (process.env.NODE_ENV !== 'production' && args[0][0] === undefined) {\n        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n      }\n\n      styles.push(args[0][0]);\n      var len = args.length;\n      var i = 1;\n\n      for (; i < len; i++) {\n        if (process.env.NODE_ENV !== 'production' && args[0][i] === undefined) {\n          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n        }\n\n        styles.push(args[i], args[0][i]);\n      }\n    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class\n\n\n    var Styled = withEmotionCache(function (props, cache, ref) {\n      var FinalTag = shouldUseAs && props.as || baseTag;\n      var className = '';\n      var classInterpolations = [];\n      var mergedProps = props;\n\n      if (props.theme == null) {\n        mergedProps = {};\n\n        for (var key in props) {\n          mergedProps[key] = props[key];\n        }\n\n        mergedProps.theme = React.useContext(ThemeContext);\n      }\n\n      if (typeof props.className === 'string') {\n        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);\n      } else if (props.className != null) {\n        className = props.className + \" \";\n      }\n\n      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);\n      className += cache.key + \"-\" + serialized.name;\n\n      if (targetClassName !== undefined) {\n        className += \" \" + targetClassName;\n      }\n\n      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;\n      var newProps = {};\n\n      for (var _key in props) {\n        if (shouldUseAs && _key === 'as') continue;\n\n        if ( // $FlowFixMe\n        finalShouldForwardProp(_key)) {\n          newProps[_key] = props[_key];\n        }\n      }\n\n      newProps.className = className;\n      newProps.ref = ref;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Insertion, {\n        cache: cache,\n        serialized: serialized,\n        isStringTag: typeof FinalTag === 'string'\n      }), /*#__PURE__*/React.createElement(FinalTag, newProps));\n    });\n    Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n    Styled.defaultProps = tag.defaultProps;\n    Styled.__emotion_real = Styled;\n    Styled.__emotion_base = baseTag;\n    Styled.__emotion_styles = styles;\n    Styled.__emotion_forwardProp = shouldForwardProp;\n    Object.defineProperty(Styled, 'toString', {\n      value: function value() {\n        if (targetClassName === undefined && process.env.NODE_ENV !== 'production') {\n          return 'NO_COMPONENT_SELECTOR';\n        } // $FlowFixMe: coerce undefined to string\n\n\n        return \".\" + targetClassName;\n      }\n    });\n\n    Styled.withComponent = function (nextTag, nextOptions) {\n      return createStyled(nextTag, _extends({}, options, nextOptions, {\n        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)\n      })).apply(void 0, styles);\n    };\n\n    return Styled;\n  };\n};\n\nexport { createStyled as default };\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Object.<string, Info>} Properties\n * @typedef {Object.<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","import {Schema} from './schema.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\n/**\n * @param {import('./schema.js').Schema[]} definitions\n * @param {string} space\n * @returns {import('./schema.js').Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  var index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    this.property = property\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.attribute = null\nInfo.prototype.property = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","var powers = 0\n\nexport var boolean = increment()\nexport var booleanish = increment()\nexport var overloadedBoolean = increment()\nexport var number = increment()\nexport var spaceSeparated = increment()\nexport var commaSeparated = increment()\nexport var commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\nvar checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    var index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    while (++index < checks.length) {\n      mark(\n        this,\n        checks[index],\n        (mask & types[checks[index]]) === types[checks[index]]\n      )\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {InstanceType<typeof DefinedInfo>} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","import {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\n/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n * @typedef {import('./info.js').Info} Info\n */\n\n/**\n * @typedef {Object.<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Object.<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array.<string>} [mustUseProperty]\n */\n\nvar own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {import('./schema.js').Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  var property = {}\n  /** @type {Normal} */\n  var normal = {}\n  /** @type {string} */\n  var prop\n  /** @type {Info} */\n  var info\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes, prop),\n        definition.properties[prop],\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport var xlink = create({\n  space: 'xlink',\n  transform: xlinkTransform,\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xlinkTransform(_, prop) {\n  return 'xlink:' + prop.slice(5).toLowerCase()\n}\n","import {create} from './util/create.js'\n\nexport var xml = create({\n  space: 'xml',\n  transform: xmlTransform,\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction xmlTransform(_, prop) {\n  return 'xml:' + prop.slice(3).toLowerCase()\n}\n","/**\n * @param {Object.<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Object.<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport var aria = create({\n  transform: ariaTransform,\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n\n/**\n * @param {unknown} _\n * @param {string} prop\n * @returns {string}\n */\nfunction ariaTransform(_, prop) {\n  return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n}\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport var html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: commaSeparated,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextMenu: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: commaSeparated,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport var svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport var html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport var svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nvar valid = /^data[-\\w.:]+$/i\nvar dash = /-[a-z]/g\nvar cap = /[A-Z]/g\n\n/**\n * @param {import('./util/schema.js').Schema} schema\n * @param {string} value\n * @returns {import('./util/info.js').Info}\n */\nexport function find(schema, value) {\n  var normal = normalize(value)\n  var prop = value\n  var Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      prop = datasetToProperty(value)\n    } else {\n      value = datasetToAttribute(value)\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} attribute\n * @returns {string}\n */\nfunction datasetToProperty(attribute) {\n  var value = attribute.slice(5).replace(dash, camelcase)\n  return 'data' + value.charAt(0).toUpperCase() + value.slice(1)\n}\n\n/**\n * @param {string} property\n * @returns {string}\n */\nfunction datasetToAttribute(property) {\n  var value = property.slice(4)\n\n  if (dash.test(value)) {\n    return property\n  }\n\n  value = value.replace(cap, kebab)\n\n  if (value.charAt(0) !== '-') {\n    value = '-' + value\n  }\n\n  return 'data' + value\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","export var hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef {Object} StringifyOptions\n * @property {boolean} [padLeft=true] Whether to pad a space before a token (`boolean`, default: `true`).\n * @property {boolean} [padRight=false] Whether to pad a space after a token (`boolean`, default: `false`).\n */\n\n/**\n * Parse comma separated tokens to an array.\n *\n * @param {string} value\n * @returns {Array.<string>}\n */\nexport function parse(value) {\n  /** @type {Array.<string>} */\n  var tokens = []\n  var input = String(value || '')\n  var index = input.indexOf(',')\n  var start = 0\n  /** @type {boolean} */\n  var end\n  /** @type {string} */\n  var token\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings to comma separated tokens.\n *\n * @param {Array.<string|number>} values\n * @param {StringifyOptions} [options]\n * @returns {string}\n */\nexport function stringify(values, options) {\n  var settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === '') {\n    values = values.concat('')\n  }\n\n  return values\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space separated tokens to an array of strings.\n *\n * @param {string} value Space separated tokens\n * @returns {Array.<string>} Tokens\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated tokens.\n *\n * @param {Array.<string|number>} values Tokens\n * @returns {string} Space separated tokens\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error | null | undefined} [error]\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: any[]) => void} Callback\n * @typedef {(...input: any[]) => any} Middleware\n *\n * @typedef {(...input: any[]) => void} Run Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Middleware[]} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {any[]} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @param {any[]} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware(...parameters)\n    } catch (error) {\n      /** @type {Error} */\n      const exception = error\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Get the total count of `character` in `value`.\n *\n * @param {any} value Content, coerced to string\n * @param {string} character Single character to look for\n * @return {number} Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  var source = String(value)\n  var count = 0\n  var index\n\n  if (typeof character !== 'string') {\n    throw new Error('Expected character')\n  }\n\n  index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef MarkdownTableOptions\n * @property {string|null|Array.<string|null|undefined>} [align]\n * @property {boolean} [padding=true]\n * @property {boolean} [delimiterStart=true]\n * @property {boolean} [delimiterStart=true]\n * @property {boolean} [delimiterEnd=true]\n * @property {boolean} [alignDelimiters=true]\n * @property {(value: string) => number} [stringLength]\n */\n\n/**\n * Create a table from a matrix of strings.\n *\n * @param {Array.<Array.<string|null|undefined>>} table\n * @param {MarkdownTableOptions} [options]\n * @returns {string}\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {number[]} Character codes as symbols for alignment per column. */\n  const alignments = []\n  let rowIndex = -1\n  /** @type {string[][]} Cells per row. */\n  const cellMatrix = []\n  /** @type {number[][]} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {number[]} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  /** @type {number} */\n  let columnIndex\n  /** @type {string[]} Cells of current row */\n  let row\n  /** @type {number[]} Sizes of current row */\n  let sizes\n  /** @type {number} Sizes of current cell */\n  let size\n  /** @type {string} Current cell */\n  let cell\n  /** @type {string[]} Chunks of current line. */\n  let line\n  /** @type {string} */\n  let before\n  /** @type {string} */\n  let after\n  /** @type {number} */\n  let code\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    columnIndex = -1\n    row = []\n    sizes = []\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  row = []\n  sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    code = alignments[columnIndex]\n    before = ''\n    after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {string[]} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    row = cellMatrix[rowIndex]\n    sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      cell = row[columnIndex] || ''\n      before = ''\n      after = ''\n\n      if (settings.alignDelimiters !== false) {\n        size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.charCodeAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `character` in `value`.\n *\n * @param {string} value Content.\n * @param {string} character Single character to look for\n * @returns {number} Count of most frequent adjacent `character`s in `value`\n */\nexport function longestStreak(value, character) {\n  var source = String(value)\n  var index = source.indexOf(character)\n  var expected = index\n  var count = 0\n  var max = 0\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = source.indexOf(character, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","reactPropsRegex","isPropValid","memoize","prop","test","charCodeAt","testOmitPropsOnStringTag","testOmitPropsOnComponent","getDefaultShouldForwardProp","tag","composeShouldForwardProps","options","isReal","shouldForwardProp","optionsShouldForwardProp","__emotion_forwardProp","propName","Insertion","_ref","cache","serialized","isStringTag","registerStyles","useInsertionEffectAlwaysWithSyncFallback","insertStyles","createStyled","identifierName","targetClassName","__emotion_real","baseTag","__emotion_base","undefined","label","defaultShouldForwardProp","shouldUseAs","args","styles","__emotion_styles","slice","push","raw","process","len","Styled","withEmotionCache","props","ref","FinalTag","as","className","classInterpolations","mergedProps","theme","React","ThemeContext","getRegisteredStyles","registered","serializeStyles","concat","name","finalShouldForwardProp","newProps","_key","displayName","defaultProps","defineProperty","value","withComponent","nextTag","nextOptions","hasOwn","toStr","toString","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","end","content","errorsList","error","msg","err","Error","reason","filename","silent","re","m","exec","comments","rules","c","comment","pos","charAt","type","declaration","val","ret","property","decl","decls","declarations","f","require","k","Symbol","for","l","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","__self","__source","q","a","g","b","d","e","h","$$typeof","_owner","current","Fragment","jsx","jsxs","inline_style_parser_1","__importDefault","iterator","styleObject","default","hasIterator","forEach","ok","unreachable","emptyOptions","settings","one","includeImageAlt","includeHtml","Boolean","alt","all","children","values","result","index","join","blankLine","tokenize","effects","nok","code","markdownSpace","factorySpace","after","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEndingOrSpace","unicodePunctuation","unicodeWhitespace","regex","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","classifyCharacter","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","constructs","existing","before","add","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","nameRe","nameReJsx","empty","Schema","normal","space","merge","definitions","normalize","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","own","create","definition","info","properties","transform","attributes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","lang","language","loading","loop","low","manifest","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextMenu","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","find","schema","Type","camelcase","datasetToProperty","kebab","datasetToAttribute","$0","hastToReact","StyleToObject","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","body","assert","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","isNaN","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","optional","toDash","$1","urlAttributes","icon","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","disable","null","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","lastIndex","Math","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","visit","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","trough","fns","pipeline","_len","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","rest","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign","ccount","character","findAndReplace","ignored","convert","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","longestStreak","encode","rank","literalWithBreak","EXIT","setext","formatHeadingAsSetext","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","rowIndex","cellMatrix","sizeMatrix","longestCellByColumn","columnIndex","row","mostCellsPerRow","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImpl","sort","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","castFactory","tests","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","SKIP","reverse","factory","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse"],"sourceRoot":""}